/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.net.ServerSocket;
import java.net.Socket;
import java.io.*;
import java.lang.Object;
import org.apache.commons.io.FileUtils;
/**
 *
 * @author Abbas
 */
public class server extends javax.swing.JFrame implements Runnable {

    ServerSocket s1=null;
    Socket client =null;
    BufferedReader br;
    BufferedWriter bw;
    String rn;
    /**
     * Creates new form Frm
     */
    public server() {
        initComponents();

        try{
           s1=new ServerSocket(1053);
           client=s1.accept();
           br=new BufferedReader(new InputStreamReader(client.getInputStream()));
           bw=new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));
           Thread th=new Thread(this);
           th.start();

           //this.Message.setText("You are online");
       }
       catch(Exception e)
       {
        //this.Message.setText(""+e);
       }


    }
public void run()
{
    String message;
    int result;
    String random="";
    StringBuilder decypt = new StringBuilder();
    while(true)
            {
        try{
            message=br.readLine();
            if(message.length()>0)
                {
                    random = FileUtils.readFileToString(new File("random.txt"), "UTF-8");
                }
            for(int i=0;i<message.length();i++){
                result = message.charAt(i) ^ random.charAt(i);
                decypt.append((char)result);}

                System.err.println(decypt.toString());
                Area.setText(decypt.toString());
}
catch(Exception e){}

            }

}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Chat = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Message = new javax.swing.JTextArea();
        Exit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Area = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        Chat.setText("send");
        Chat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChatActionPerformed(evt);
            }
        });

        Message.setColumns(20);
        Message.setLineWrap(true);
        Message.setRows(5);
        jScrollPane1.setViewportView(Message);

        Exit.setText("exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        Area.setColumns(20);
        Area.setRows(5);
        Area.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                AreaAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(Area);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(Chat, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(37, 37, 37))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(33, 33, 33)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Chat, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChatActionPerformed
       String random;
       String message;
        try
        {
            message=Message.getText();
            random=getRandom(message.length());

            PrintWriter writer = new PrintWriter("random.txt");
            writer.println(random);
            writer.close();


            System.err.println("server generated "+random);
            int result;
            StringBuilder cypher = new StringBuilder();

            for(int i=0;i<message.length();i++){
                result = message.charAt(i) ^ random.charAt(i);
                cypher.append((char)result);
            }
            System.err.println("Server sent "+cypher);
            bw.write(cypher.toString());
            bw.newLine();
            bw.flush();
            Message.setText("");
        }catch(Exception e)
        {

        }


    }//GEN-LAST:event_ChatActionPerformed

    private String getRandom(int number_of_bits) throws UnsupportedEncodingException, FileNotFoundException, IOException {
        Reader r = new BufferedReader(new InputStreamReader(
                new FileInputStream("/dev/random"), "US-ASCII"));
        try {
          StringBuilder resultBuilder = new StringBuilder();
          int count = 0;
          int intch;
          while (((intch = r.read()) != -1) && count < number_of_bits) {
            resultBuilder.append((char) intch);
            count++;
          }
          rn=resultBuilder.toString();
          return resultBuilder.toString();
        }
        finally {r.close();}


    }

    public String returnRandom(){
        return rn;
    }


    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(1);
    }//GEN-LAST:event_ExitActionPerformed

    private void AreaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_AreaAncestorAdded

    }//GEN-LAST:event_AreaAncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new server().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Area;
    private javax.swing.JButton Chat;
    private javax.swing.JButton Exit;
    private javax.swing.JTextArea Message;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
